//
//  functions.c
//  TicTacToe
//
//  Created by Alex Gustafsson on 2016-12-07.
//  Copyright Â© 2016 Alex Gustafsson. All rights reserved.
//

#include "functions.h"

void printGame(char board[][3]){
    printf_n("");
    for(int y = 0; y < 3; y++){
        //I would probably prefer not hard coding the size, but hey; YAGNI
        printf_n("| %c | %c | %c |", board[y][0], board[y][1], board[y][2]);
        if(y < 2)
            printf_n("|---|---|---|");
    }
}

void initializeGame(char board[][3]){
    int i = 1;
    for(int y = 0; y < 3; y++){
        for(int x = 0; x < 3; x++){
            //The '0' is interpreted by the compiler as the zero character of the ASCII table.
            //0-9 is in order in the table and adding one, simply increases the number (up to 9).
            board[y][x] = (i++) + '0';
        }
    }
}

bool isAvailable(char board[][3], int placeChosen){
    bool outOfReach = (!(placeChosen >= 1 && placeChosen <= 9));
    
    int y = rowFromIndex(--placeChosen);
    
    char place = board[y][placeChosen - 3 * y];
    
    return outOfReach ? false : place != 'X' && place != 'O';
}

void place(char board[][3], int placeChosen, int currentPlayer){
    int y = rowFromIndex(placeChosen);

    board[y][--placeChosen - 3 * y] = currentPlayer == 1 ? 'X' : 'O';
}

int rowFromIndex(int index){
    int y = 0;
    
    if(index > 6)
        y = 2;
    else if(index > 3)
        y = 1;
    
    return y;
}

int isWinner(char board[][3]){

    bool matched = false;

    //123
    //***
    //789
    matched = (board[0][0] == board[0][1] && board[0][1] == board[0][2]) ||
              (board[1][0] == board[1][1] && board[1][1] == board[1][2]) ||
              (board[2][0] == board[2][1] && board[2][1] == board[2][2]);
    
    //1*3
    //4*6
    //7*9
    if(!matched)
        matched = (board[0][0] == board[1][0] && board[1][0] == board[2][0]) ||
                  (board[0][1] == board[1][1] && board[1][1] == board[2][1]) ||
                  (board[0][2] == board[1][2] && board[1][2] == board[2][2]);

    
    //*23
    //4*6
    //78*
    if(!matched)
        matched = board[0][0] == board[1][1] && board[1][1] == board[2][2];
    
    //12*
    //4*6
    //*89
    if(!matched)
        matched = board[0][2] == board[1][1] && board[1][1] == board[2][0];
    
    return matched;
}

bool isFull(char board[][3]){
    int taken = 0;
    
    for(int y = 0; y < 3; y++){
        for(int x = 0; x < 3; x++)
            taken += (board[y][x] == 'X' || board[y][x] == 'O') ? 1 : 0;
    }
    
    return taken == 9;
}
